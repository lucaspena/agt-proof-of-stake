==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(epsilon) .
result Bool: false
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(epsilon) .
result Zero: 0
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1) block(1, SH1) block(1, SH1) block(
    1, SH1)) .
result NzNat: 4
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 2 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : block(1, SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1)) \ 1 .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1) block(1, SH1) block(1,
    SH1)) \ 2 .
result BlockChain: genesisBlock(SH1) block(1, SH1)
==========================================
reduce in STAGE-1 : maxValid(genesisBlock(SH1), emptyBlockChainSet) .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : maxValid(genesisBlock(SH1), genesisBlock(SH2) block(2,
    SH2)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : maxValid(genesisBlock(SH1), (genesisBlock(SH2) block(2,
    SH2)) ; genesisBlock(SH3) block(2, SH3)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : maxValid(genesisBlock(SH1) block(1, SH2) block(2, SH2)
    block(3, SH2), (genesisBlock(SH1) block(1, SH3) block(2, SH3) block(3,
    SH3)) ; (genesisBlock(SH1) block(1, SH4) block(2, SH4) block(3, SH4)) ;
    genesisBlock(SH1) block(1, SH5) block(2, SH5) block(3, SH5)) .
result BlockChain: genesisBlock(SH1) block(1, SH2) block(2, SH2) block(3, SH2)
==========================================
search in STAGE-1 : leader-election(1, sh('a, 3) sh('b, 6) sh('c, 1)) =>! ER1 .

Solution 1 (state 1)
ER1 --> sh('a, 3) # prob(3/10)

Solution 2 (state 3)
ER1 --> sh('b, 6) # prob(3/5)

Solution 3 (state 5)
ER1 --> sh('c, 1) # prob(1/10)

Solution 4 (state 7)
ER1 --> bad-election # prob(0)

No more solutions.
==========================================
search in STAGE-1 : leader-election(1, sh('a, 3) sh('b, 6) sh('c, 1)) =>!
    bad-election # prob(R1) .

Solution 1 (state 7)
R1 --> 0

No more solutions.
==========================================
reduce in STAGE-1 : genesisBlock(sh('good, 51) sh('bad, 49)) in epsilon .
result Bool: false
==========================================
search in STAGE-1 : 	{emptyNetwork
	| epsilon
	| emptyStakeholderList
	| N
	} =>! ST .

Solution 1 (state 0)
ST --> 	{emptyNetwork
	| epsilon
	| emptyStakeholderList
	| N
	}

No more solutions.
==========================================
rewrite in STAGE-1 : 	{(sh('bad, 49)[emptyBlockChainSet]) sh('good, 51)[
    emptyBlockChainSet]
	| genesisBlock(sh('good, 51) sh('bad, 49))
	| sh('good, 51) sh('bad, 49)
	| 1
	} .
result State: 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(2, sh('bad, 49))]) sh('good,
    51)[genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51)
    sh('bad, 49)) block(2, sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51)
    sh('bad, 49)) block(2, sh('bad, 49))
	| emptyStakeholderList
	| 3
	}
==========================================
search in STAGE-1 : 	{(sh('bad, 49)[emptyBlockChainSet]) sh('good, 51)[
    emptyBlockChainSet]
	| genesisBlock(sh('good, 51) sh('bad, 49))
	| sh('good, 51) sh('bad, 49)
	| 1
	} =>! ST .

Solution 1 (state 19)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49))]) sh('good,
    51)[genesisBlock(sh('good, 51) sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49))
	| emptyStakeholderList
	| 3
	}

Solution 2 (state 47)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(
    sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))]) sh('good, 51)[
    genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51) sh(
    'bad, 49)) block(1, sh('good, 51))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51)
    sh('bad, 49)) block(1, sh('good, 51))
	| emptyStakeholderList
	| 3
	}

Solution 3 (state 52)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(
    sh('good, 51) sh('bad, 49)) block(2, sh('bad, 49))]) sh('good, 51)[
    genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51) sh(
    'bad, 49)) block(2, sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; genesisBlock(sh('good, 51)
    sh('bad, 49)) block(2, sh('bad, 49))
	| emptyStakeholderList
	| 3
	}

Solution 4 (state 75)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(2, sh('bad, 49))]) sh('good,
    51)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (genesisBlock(sh('good, 51)
    sh('bad, 49)) block(1, sh('good, 51))) ; genesisBlock(sh('good, 51) sh(
    'bad, 49)) block(2, sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; (genesisBlock(sh('good,
    51) sh('bad, 49)) block(1, sh('good, 51))) ; genesisBlock(sh('good, 51) sh(
    'bad, 49)) block(2, sh('bad, 49))
	| emptyStakeholderList
	| 3
	}

Solution 5 (state 80)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51)) block(2,
    sh('bad, 49))]) sh('good, 51)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51)) block(2,
    sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; (genesisBlock(sh('good,
    51) sh('bad, 49)) block(1, sh('good, 51))) ; genesisBlock(sh('good, 51) sh(
    'bad, 49)) block(1, sh('good, 51)) block(2, sh('bad, 49))
	| emptyStakeholderList
	| 3
	}

Solution 6 (state 89)
ST --> 	{(sh('bad, 49)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(2, sh('bad, 49))) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51)) block(2,
    sh('bad, 49))]) sh('good, 51)[genesisBlock(sh('good, 51) sh('bad, 49)) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51))) ; (
    genesisBlock(sh('good, 51) sh('bad, 49)) block(2, sh('bad, 49))) ;
    genesisBlock(sh('good, 51) sh('bad, 49)) block(1, sh('good, 51)) block(2,
    sh('bad, 49))]
	| genesisBlock(sh('good, 51) sh('bad, 49)) ; (genesisBlock(sh('good,
    51) sh('bad, 49)) block(1, sh('good, 51))) ; (genesisBlock(sh('good, 51)
    sh('bad, 49)) block(2, sh('bad, 49))) ; genesisBlock(sh('good, 51) sh('bad,
    49)) block(1, sh('good, 51)) block(2, sh('bad, 49))
	| emptyStakeholderList
	| 3
	}

No more solutions.
Bye.
