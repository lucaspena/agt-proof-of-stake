==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(epsilon) .
result Bool: false
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(epsilon) .
result Zero: 0
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1) block(1, SH1) block(1, SH1) block(
    1, SH1)) .
result NzNat: 4
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 2 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : block(1, SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1)) \ 1 .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1) block(1, SH1) block(1,
    SH1)) \ 2 .
result BlockChain: genesisBlock(SH1) block(1, SH1)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), emptyBlockChainSet) .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), genesisBlock(SH2) block(2,
    SH2)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), (genesisBlock(SH2) block(2,
    SH2)) ; genesisBlock(SH3) block(2, SH3)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1) block(1, SH2) block(2, SH2)
    block(3, SH2), (genesisBlock(SH1) block(1, SH3) block(2, SH3) block(3,
    SH3)) ; (genesisBlock(SH1) block(1, SH4) block(2, SH4) block(3, SH4)) ;
    genesisBlock(SH1) block(1, SH5) block(2, SH5) block(3, SH5)) .
result BlockChain: genesisBlock(SH1) block(1, SH2) block(2, SH2) block(3, SH2)
==========================================
reduce in STAGE-1 : leader-election(1, sh('a, 3) sh('b, 6) sh('c, 1)) .
result ElectionResult: (sh('a, 3) # prob(3/10)) | (sh('b, 6) # prob(3/5)) | (
    sh('c, 1) # prob(1/10))
==========================================
reduce in STAGE-1 : leader-elections(1, 4, sh('a, 3) sh('b, 6) sh('c, 1)) .
result ElectionResult: ((sh('a, 3) sh('a, 3) sh('a, 3)) # prob(27/1000)) | ((
    sh('a, 3) sh('a, 3) sh('b, 6)) # prob(27/500)) | ((sh('a, 3) sh('a, 3) sh(
    'c, 1)) # prob(9/1000)) | ((sh('a, 3) sh('b, 6) sh('a, 3)) # prob(27/500))
    | ((sh('a, 3) sh('b, 6) sh('b, 6)) # prob(27/250)) | ((sh('a, 3) sh('b, 6)
    sh('c, 1)) # prob(9/500)) | ((sh('a, 3) sh('c, 1) sh('a, 3)) # prob(
    9/1000)) | ((sh('a, 3) sh('c, 1) sh('b, 6)) # prob(9/500)) | ((sh('a, 3)
    sh('c, 1) sh('c, 1)) # prob(3/1000)) | ((sh('b, 6) sh('a, 3) sh('a, 3)) #
    prob(27/500)) | ((sh('b, 6) sh('a, 3) sh('b, 6)) # prob(27/250)) | ((sh('b,
    6) sh('a, 3) sh('c, 1)) # prob(9/500)) | ((sh('b, 6) sh('b, 6) sh('a, 3)) #
    prob(27/250)) | ((sh('b, 6) sh('b, 6) sh('b, 6)) # prob(27/125)) | ((sh('b,
    6) sh('b, 6) sh('c, 1)) # prob(9/250)) | ((sh('b, 6) sh('c, 1) sh('a, 3)) #
    prob(9/500)) | ((sh('b, 6) sh('c, 1) sh('b, 6)) # prob(9/250)) | ((sh('b,
    6) sh('c, 1) sh('c, 1)) # prob(3/500)) | ((sh('c, 1) sh('a, 3) sh('a, 3)) #
    prob(9/1000)) | ((sh('c, 1) sh('a, 3) sh('b, 6)) # prob(9/500)) | ((sh('c,
    1) sh('a, 3) sh('c, 1)) # prob(3/1000)) | ((sh('c, 1) sh('b, 6) sh('a, 3))
    # prob(9/500)) | ((sh('c, 1) sh('b, 6) sh('b, 6)) # prob(9/250)) | ((sh('c,
    1) sh('b, 6) sh('c, 1)) # prob(3/500)) | ((sh('c, 1) sh('c, 1) sh('a, 3)) #
    prob(3/1000)) | ((sh('c, 1) sh('c, 1) sh('b, 6)) # prob(3/500)) | ((sh('c,
    1) sh('c, 1) sh('c, 1)) # prob(1/1000))
==========================================
reduce in STAGE-1 : genesisBlock(sh('honest, 51) sh('dishonest, 49)) in epsilon
    .
result Bool: false
==========================================
rewrite in STAGE-1 : 	[(sh('dishonest, 49)[emptyBlockChainSet]) sh('honest,
    51)[emptyBlockChainSet]
	| genesisBlock(sh('honest, 51) sh('dishonest, 49))
	| sh('honest, 51) sh('honest, 51)
	| 0 -> 4
	] .
result State: 	{(sh('dishonest, 49)[emptyBlockChainSet]) sh('honest, 51)[
    genesisBlock(sh('honest, 51) sh('dishonest, 49)) ; genesisBlock(sh('honest,
    51) sh('dishonest, 49)) ; (genesisBlock(sh('honest, 51) sh('dishonest, 49))
    block(1, sh('honest, 51))) ; (genesisBlock(sh('honest, 51) sh('dishonest,
    49)) block(1, sh('honest, 51))) ; genesisBlock(sh('honest, 51) sh(
    'dishonest, 49)) block(1, sh('honest, 51)) block(2, sh('honest, 51))]
	| genesisBlock(sh('honest, 51) sh('dishonest, 49)) ; (genesisBlock(sh(
    'honest, 51) sh('dishonest, 49)) block(1, sh('honest, 51))) ; genesisBlock(
    sh('honest, 51) sh('dishonest, 49)) block(1, sh('honest, 51)) block(2, sh(
    'honest, 51))
	| emptyStakeholderList
	| 3 -> 4
	}
==========================================
reduce in EXPECTATIONS : expected-dishonest-chain-reward((sh('dishonest, 49)[
    emptyBlockChainSet]) sh('honest, 51)[emptyBlockChainSet], genesisBlock(sh(
    'honest, 51) sh('dishonest, 49)), 0, 3) .
result Rewards: (sh('dishonest, 49) |-> 1355683/2000000) sh('honest, 51) |->
    644317/2000000
==========================================
reduce in EXPECTATIONS : expected-reward((sh('dishonest, 49)[
    emptyBlockChainSet]) sh('honest, 51)[emptyBlockChainSet], genesisBlock(sh(
    'honest, 51) sh('dishonest, 49)), 0, 3) .
result Rewards: (sh('dishonest, 49) |-> 49/100) sh('honest, 51) |-> 51/100
==========================================
reduce in EXPECTATIONS : expected-reward((sh('honest, 49)[emptyBlockChainSet])
    sh('honest, 51)[emptyBlockChainSet], genesisBlock(sh('honest, 51) sh(
    'honest, 49)), 0, 3) .
result Rewards: (sh('honest, 49) |-> 49/100) sh('honest, 51) |-> 51/100
Bye.
