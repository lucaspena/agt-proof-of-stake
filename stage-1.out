==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(epsilon) .
result Bool: false
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : isValid(genesisBlock(SH1)) .
result Bool: true
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(epsilon) .
result Zero: 0
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1)) .
result NzNat: 1
==========================================
reduce in STAGE-1 : length(genesisBlock(SH1) block(1, SH1) block(1, SH1) block(
    1, SH1)) .
result NzNat: 4
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : genesisBlock(SH1) \ 2 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : block(1, SH1) \ 1 .
result BlockChain: epsilon
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1)) \ 1 .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : (genesisBlock(SH1) block(1, SH1) block(1, SH1) block(1,
    SH1)) \ 2 .
result BlockChain: genesisBlock(SH1) block(1, SH1)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), emptyBlockChainSet) .
result BlockChain: genesisBlock(SH1)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), genesisBlock(SH2) block(2,
    SH2)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1), (genesisBlock(SH2) block(2,
    SH2)) ; genesisBlock(SH3) block(2, SH3)) .
result BlockChain: genesisBlock(SH2) block(2, SH2)
==========================================
reduce in STAGE-1 : max-valid(genesisBlock(SH1) block(1, SH2) block(2, SH2)
    block(3, SH2), (genesisBlock(SH1) block(1, SH3) block(2, SH3) block(3,
    SH3)) ; (genesisBlock(SH1) block(1, SH4) block(2, SH4) block(3, SH4)) ;
    genesisBlock(SH1) block(1, SH5) block(2, SH5) block(3, SH5)) .
result BlockChain: genesisBlock(SH1) block(1, SH2) block(2, SH2) block(3, SH2)
==========================================
reduce in STAGE-1 : leader-election(1, sh('a, 3) sh('b, 6) sh('c, 1)) .
result PElectionResult: (sh('a, 3) # prob(3/10)) | (sh('b, 6) # prob(3/5)) | (
    sh('c, 1) # prob(1/10))
==========================================
reduce in STAGE-1 : genesisBlock(sh('honest, 51) sh('dishonest, 49)) in epsilon
    .
result Bool: false
==========================================
search in STAGE-1 : 	{emptyNetwork
	| epsilon
	| noneStakeholder
	| 0 -> 99
	} # prob(1) =>! ST .

No solution.
==========================================
rewrite in STAGE-1 : 	{(sh('dishonest, 49)[emptyBlockChainSet]) sh('honest,
    51)[emptyBlockChainSet]
	| genesisBlock(sh('honest, 51) sh('dishonest, 49))
	| noneStakeholder
	| 1 -> 4
	} .
result PState: (reward(sh('dishonest, 49) |-> 1) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 2) # prob(127449/500000)) | (reward(sh('honest, 51) |->
    3) # prob(132651/1000000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest,
    51) |-> 1) # prob(372351/1000000))
==========================================
search in STAGE-1 : 	{(sh('dishonest, 49)[emptyBlockChainSet]) sh('honest,
    51)[emptyBlockChainSet]
	| genesisBlock(sh('honest, 51) sh('dishonest, 49))
	| noneStakeholder
	| 1 -> 3
	} # prob(1) =>! PST:PState .

Solution 1 (state 113856)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh('honest,
    51) |-> 1) # prob(2499/5000)) | (reward(sh('honest, 51) |-> 2) # prob(
    2601/10000))

Solution 2 (state 412292)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(49/100)) | (reward(sh(
    'honest, 51) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2) #
    prob(2601/10000))

Solution 3 (state 412293)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 1) # prob(2499/5000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000))

Solution 4 (state 412375)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh(
    'dishonest, 49) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 1)
    # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2) # prob(2601/10000))

Solution 5 (state 412422)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest, 51)
    |-> 1) # prob(2499/10000))

Solution 6 (state 412687)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh('honest,
    51) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2) # prob(
    2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest, 51) |-> 1) #
    prob(2499/10000))

Solution 7 (state 570469)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 1) # prob(2499/5000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000))

Solution 8 (state 738336)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2499/10000)) | (reward(
    sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(sh('honest, 51) |->
    1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2) # prob(2601/10000))

Solution 9 (state 738440)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest, 51)
    |-> 1) # prob(2499/10000))

Solution 10 (state 766132)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(7399/10000)) | (reward(
    sh('honest, 51) |-> 2) # prob(2601/10000))

Solution 11 (state 766613)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh(
    'dishonest, 49) |-> 1) # prob(2499/5000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000))

Solution 12 (state 812004)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(49/100)) | (reward(sh(
    'honest, 51) |-> 2) # prob(2601/10000)) | (reward((sh('dishonest, 49) |->
    1) sh('honest, 51) |-> 1) # prob(2499/10000))

Solution 13 (state 813551)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh(
    'dishonest, 49) |-> 1) # prob(2499/10000)) | (reward(sh('honest, 51) |-> 2)
    # prob(2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest, 51)
    |-> 1) # prob(2499/10000))

Solution 14 (state 892806)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 2) # prob(2601/10000)) | (reward((sh('dishonest, 49)
    |-> 1) sh('honest, 51) |-> 1) # prob(2499/5000))

Solution 15 (state 894340)
    rewrites/second)
PST:PState --> (reward(emptyRewards) # prob(2401/10000)) | (reward(sh('honest,
    51) |-> 2) # prob(2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh(
    'honest, 51) |-> 1) # prob(2499/5000))

Solution 16 (state 1058208)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2499/5000)) | (reward(
    sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(sh('honest, 51) |->
    2) # prob(2601/10000))

Solution 17 (state 1091659)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 1) # prob(2499/10000)) | (reward(
    sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(sh('honest, 51) |->
    2) # prob(2601/10000)) | (reward((sh('dishonest, 49) |-> 1) sh('honest, 51)
    |-> 1) # prob(2499/10000))

Solution 18 (state 1142196)
    rewrites/second)
PST:PState --> (reward(sh('dishonest, 49) |-> 2) # prob(2401/10000)) | (reward(
    sh('honest, 51) |-> 2) # prob(2601/10000)) | (reward((sh('dishonest, 49)
    |-> 1) sh('honest, 51) |-> 1) # prob(2499/5000))

No more solutions.
    rewrites/second)
Bye.
